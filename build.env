#!/bin/bash

SCRIPT=`realpath $0`
SCRIPTPATH=`dirname $SCRIPT`
ROOT_PATH=$SCRIPTPATH

WORKSPACE_DIR=${HOME}/workspace
TOOLCHAIN_TARBALL="gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2"
TOOLCHAIN_RELEASE_PATH="10.3-2021.10"
TOOLCHAIN_LINK="https://developer.arm.com/-/media/Files/downloads/gnu-rm/${TOOLCHAIN_RELEASE_PATH}/${TOOLCHAIN_TARBALL}"
TOOLCHAIN_BIN="gcc-arm-none-eabi-10.3-2021.10/bin"
TOOLCHAIN_LOCAL_FOLDER=${WORKSPACE_DIR}/toolchains/${TOOLCHAIN_BIN}

PICOTOOL_VERSION="1.1.0"
PICOTOOL_TARBALL="${PICOTOOL_VERSION}.tar.gz"
PICOTOOL_URL="https://github.com/raspberrypi/picotool/archive/refs/tags/${PICOTOOL_TARBALL}"
PICOTOOL_LOCAL_FOLDER=${WORKSPACE_DIR}/tools

# Functions to help us manage paths.  Second argument is the name of the
# path variable to be modified (default: PATH)
pathremove () {
  local IFS=':'
  local NEWPATH
  local DIR
  local PATHVARIABLE=${2:-PATH}
  for DIR in ${!PATHVARIABLE} ; do
      if [ "$DIR" != "$1" ] ; then
          NEWPATH=${NEWPATH:+$NEWPATH:}$DIR
      fi
  done
  export $PATHVARIABLE="$NEWPATH"
}

pathprepend () {
  pathremove $1 $2
  local PATHVARIABLE=${2:-PATH}
  export $PATHVARIABLE="$1${!PATHVARIABLE:+:${!PATHVARIABLE}}"
}

pathappend () {
  pathremove $1 $2
  local PATHVARIABLE=${2:-PATH}
  export $PATHVARIABLE="${!PATHVARIABLE:+${!PATHVARIABLE}:}$1"
}

toolchain-install () {
  mkdir -p ${WORKSPACE_DIR}/toolchains/
  wget ${TOOLCHAIN_LINK} -P ${WORKSPACE_DIR}/toolchains/
  cd ${WORKSPACE_DIR}/toolchains/
  tar -jxf ${TOOLCHAIN_TARBALL}
  rm -rf ${TOOLCHAIN_TARBALL}
  cd -
}

picotool-install () {
  sudo apt install -y libusb-1.0-0-dev
  mkdir -p ${WORKSPACE_DIR}/tools/
  wget ${PICOTOOL_URL} -P ${WORKSPACE_DIR}/tools/
  cd ${WORKSPACE_DIR}/tools/
  tar -xzvf ${PICOTOOL_TARBALL}
  rm -rf ${PICOTOOL_TARBALL}
  cd -
  mkdir -p ${WORKSPACE_DIR}/tools/picotool-${PICOTOOL_VERSION}/build
  cd ${WORKSPACE_DIR}/tools/picotool-${PICOTOOL_VERSION}/build
  cmake .. -DPICO_SDK_PATH=${ROOT_PATH}/3pp/pico-sdk/
  make
  cp picotool ${WORKSPACE_DIR}/tools/
  cd -
  rm -rf ${WORKSPACE_DIR}/tools/picotool-${PICOTOOL_VERSION}
}

clang-code-format() {
  FOLDERS="utils app"
  for FOLDER in ${FOLDERS}
  do
    echo "code formatting: ${ROOT_PATH}/${FOLDER}"
    find ${ROOT_PATH}/${FOLDER} -regex '.*\.\(c\|h\|cpp\|hpp\|cc\|cxx\)' -exec clang-format -style=file -i {} \;
  done
}

case "$1" in
  install-toolchain)
    toolchain-install
    pathappend ${TOOLCHAIN_LOCAL_FOLDER}
    ;;
  install-tools)
    picotool-install
    pathappend ${PICOTOOL_LOCAL_FOLDER}
    ;;
  clang-code-format)
    clang-code-format
    ;;
  build)
    mkdir -p ${ROOT_PATH}/build
    cd ${ROOT_PATH}/build
    cmake .. -DDEBUG=1
    make all -j $(nproc)
    cd -
    ;;
  help)
    echo "Usage: $0 {install-toolchain|install-tools|clang-code-format|build|help}"
    ;;
  *)
    pathappend ${TOOLCHAIN_LOCAL_FOLDER}
    pathappend ${PICOTOOL_LOCAL_FOLDER}
    ;;
esac
